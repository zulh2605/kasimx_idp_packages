DWAPlannerROS:

# Robot Configuration Parameters - Kobuki
  max_vel_x: 5.0  # 0.55
  min_vel_x: 0

  max_vel_y: 0  # diff drive robot
  min_vel_y: 0  # diff drive robot

  max_vel_trans: 5.0 # choose slightly less than the base's capability
  min_vel_trans: 0.1  # this is the min trans velocity when there is negligible rotational velocity
  trans_stopped_vel: 0.1

  # Warning!
  #   do not set min_trans_vel to 0.0 otherwise dwa will always think translational velocities
  #   are non-negligible and small in place rotational velocities will be created.
  max_vel_theta: 10.0  # choose slightly less than the base's capability
  min_vel_theta: 0.1  # this is the min angular velocity when there is negligible translational velocity
  theta_stopped_vel: 0.1

  acc_lim_x: 1.0 # maximum is theoretically 2.0, but we
  acc_lim_theta: 2.0
  acc_lim_y: 0      # diff drive robot

# Goal Tolerance Parameters
  yaw_goal_tolerance: 0.1  # 0.05
  xy_goal_tolerance: 0.2  # 0.10
  # latch_xy_goal_tolerance: false

# Forward Simulation Parameters
  sim_time: 1.7       # 1.7
  vx_samples: 6       # 3
  vy_samples: 1       # diff drive robot, there is only one sample
  vtheta_samples: 20  # 20

# Trajectory Scoring Parameters
  path_distance_bias: 64.0      # 32.0   - weighting for how much it should stick to the global path plan
  goal_distance_bias: 24.0      # 24.0   - weighting for how much it should attempt to reach its goal
  occdist_scale: 0.5            # 0.01   - weighting for how much the controller should avoid obstacles
  forward_point_distance: 0.325 # 0.325  - how far along to place an additional scoring point
  stop_time_buffer: 0.2         # 0.2    - amount of time a robot must stop in before colliding for a valid traj.
  scaling_speed: 0.25           # 0.25   - absolute velocity at which to start scaling the robot's footprint
  max_scaling_factor: 0.2       # 0.2    - how much to scale the robot's footprint when at speed.

# Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05  # 0.05   - how far to travel before resetting oscillation flags

# Debugging
  publish_traj_pc : true
  publish_cost_grid_pc: true
  global_frame_id: odom


# # Differential-drive robot configuration - necessary?
  # holonomic_robot: false
######################################

  # # robot parameters
  # max_vel_x: 0.18    # max velocity for x axis(meter/sec)
  # min_vel_x: -0.18      # min velocity for x axis (meter/sec)
  # max_vel_y: 0.0     # Not used. applies to omni directional robots only
  # min_vel_y: 0.0     # Not used. applies to omni directional robots only
  # max_trans_vel: 0.18 # max translational velocity(meter/sec)
  # min_trans_vel: 0.05 # min translational velocity (meter/sec), negative value for reverse
  # # trans_stopped_vel: 0.01 # translation stop velocity(meter/sec)
  # max_rot_vel: 1.8     # max rotational velocity(radian/sec)
  # min_rot_vel: 0.7     # min rotational velocity (radian/sec)
  # # rot_stopped_vel: 0.01 # rotation stop velocity (radian/sec)
  # acc_lim_x: 2.0     # limit for x axis acceleration(meter/sec^2)
  # acc_lim_y: 0.0     # limit for y axis acceleration (meter/sec^2)
  # acc_lim_theta: 2.0    
  # # theta axis angular acceleration limit (radian/sec^2)
  # # Target point error tolerance
  # yaw_goal_tolerance: 0.15 # yaw axis target point error tolerance (radian)
  # xy_goal_tolerance: 0.05 # x, y distance Target point error tolerance (meter)
  # # Forward Simulation Parameter
  # sim_time: 3.5        # forward simulation trajectory time
  # vx_samples: 20     # number of sample in x axis velocity space
  # vy_samples: 0        # number of sample in y axis velocity space
  # vtheta_samples: 40     # number of sample in theta axis velocity space
  # # Trajectory scoring parameter (trajectory evaluation)
  # # Score calculation used for the trajectory evaluation cost function is as follows.
  # # cost =
  # # path_distance_bias * (distance to path from the endpoint of the trajectory in meters)
  # # + goal_distance_bias * (distance to local goal from the endpoint of the trajectory in meters)
  # # + occdist_scale * (maximum obstacle cost along the trajectory in obstacle cost (0-254))
  # path_distance_bias: 32.0 # weight value of the controller that follows the given path
  # goal_distance_bias: 24.0 # weight value for the goal pose and control velocity
  # occdist_scale: 0.04      # weight value for the obstacle avoidance
  # forward_point_distance: 0.325 # distance between the robot and additional scoring point (meter)
  # stop_time_buffer: 0.2 # time required for the robot to stop before collision (sec)
  # scaling_speed: 0.25      # scaling Speed (meter/sec)
  # max_scaling_factor: 0.2      # max scaling factor
  # # Oscillation motion prevention paramter
  # # distance the robot must move before the oscillation flag is reset
  # oscillation_reset_dist: 0.05
  # # Debugging
  # publish_traj_pc: true    # debugging setting for the movement trajectory
  # publish_cost_grid_pc: true # debugging setting for costmap
  # global_frame_id: odom      # ID setting for global frame

